#include <iostream>
#include <cstdlib>
#include <stdlib.h>

using namespace std;

class Nod
{
protected:
    int info;
    Nod* next;
public:
    Nod();
    Nod(int);
    Nod(int, Nod*);
    Nod(const Nod& nod2);
    virtual ~Nod();

    int getInfo();
    Nod* getNext();
    void setInfo(int);
    void setNext(Nod*);
    Nod& operator =(const Nod&);
    friend istream& operator >>(istream&, Nod&);
    friend ostream& operator <<(ostream&, Nod&);
};

Nod::Nod()
{
    ///this -> info = 0;
    this -> next = NULL;
}
Nod::Nod(int info)
{
    this -> info = info;
    this -> next = NULL;
}
Nod::Nod(int info, Nod* next)
{
    this -> info = info;
    this -> next = next;
}
Nod::Nod(const Nod& n2)
{
    this -> info = n2.info;
    this -> next = n2.next;
}
Nod::~Nod()
{

}
int Nod::getInfo()
{
    return info;
}
Nod* Nod::getNext()
{
    return next;
}
void Nod::setInfo(int info)
{
    this -> info = info;
}
void Nod::setNext(Nod* next)
{
    this -> next = next;
}
Nod& Nod::operator =(const Nod &n)
{
    info = n.info;
    next = n.next;
}
istream& operator >>(istream& in, Nod& n)
{
    in >> n.info;
    return in;
}
ostream& operator <<(ostream& out, Nod& n)
{
    out << n.info;
    return out;
}

///--------------------------------------------------

class Nod_dublu:public Nod
{
private:
    Nod* ante;

public:
    Nod_dublu();
    Nod_dublu(int);
    Nod_dublu(int, Nod*);
    Nod_dublu(int, Nod*, Nod*);
    Nod_dublu(const Nod_dublu& nod2);
    ~Nod_dublu();

    Nod* getAnte();
    void setAnte(Nod*);
    Nod_dublu& operator =(const Nod_dublu&);
    friend istream& operator >>(istream&, Nod_dublu&);
    friend ostream& operator <<(ostream&, Nod_dublu&);
};

Nod_dublu::Nod_dublu()
{
    this -> ante = NULL;
}
Nod_dublu::Nod_dublu(int info):Nod(info)
{
    this -> ante = NULL;
}
Nod_dublu::Nod_dublu(int info, Nod* next):Nod(info, next)
{
    this -> ante = NULL;
}
Nod_dublu::Nod_dublu(int info, Nod* next, Nod* ante):Nod(info, next)
{
    this -> ante = ante;
}
Nod_dublu::Nod_dublu(const Nod_dublu& n2):Nod(n2)
{
    this -> ante = n2.ante;
}
Nod_dublu::~Nod_dublu()
{

}
Nod* Nod_dublu::getAnte()
{
    return ante;
}
void Nod_dublu::setAnte(Nod* ante)
{
    this -> ante = ante;
}
Nod_dublu& Nod_dublu::operator =(const Nod_dublu &n)
{
    Nod::operator=(n);
    ante = n.ante;
}
istream& operator >>(istream& in, Nod_dublu& n)
{
    in >>((Nod&) n);
}
ostream& operator <<(ostream& out, Nod_dublu& n)
{
    out <<((Nod&) n);
}

///----------------------------------------

class Lista
{
protected:
    Nod_dublu* prim;
    Nod_dublu* ultim;

public:
    Lista();
    Lista(int, int*);
    Lista(const Lista&);
    virtual ~Lista();

    int nr_noduri();
    void inserare_final(int);
    void inserare_pozitie(int, int);
    void stergere_pozitie(int);
    virtual void citire(istream &);
    virtual void afisare(ostream &);
    friend istream & operator >> (istream &, Lista &);
    friend ostream & operator << (ostream &, Lista &);
    Lista& operator =(Lista &);
};

Lista::Lista()
{
    prim = NULL;
    ultim = NULL;
}
Lista::Lista(int n, int *v)
{
    prim = NULL;
    ultim = NULL;
    for(int i = 1; i <= n; i++)
        inserare_final(v[i]);
}
Lista::Lista(const Lista& ld)
{
    Nod_dublu* p = ld.prim;
    Nod_dublu* r = prim;
    while(p != ld.ultim)
    {
        prim = ld.prim;
        p = (Nod_dublu*) p -> getNext();
        r = (Nod_dublu*) r -> getNext();
    }
    ultim = ld.ultim;
}
Lista::~Lista()
{
    Nod_dublu* p = prim;
    if(p == ultim)
    {
        delete p;
        return;
    }

    do
    {
        Nod_dublu* aux;
        aux = (Nod_dublu*) p -> getNext();
        delete p;
        p = aux;
    }
    while(p != ultim);

    delete p;
}
int Lista::nr_noduri()
{
    int nr = 0;
    if(prim == NULL)
        return 0;

    Nod_dublu* p = prim;
    while(p != ultim)
    {
        nr++;
        p = (Nod_dublu*) p -> getNext();
    }
    nr++;
    return nr;
}
void Lista::inserare_final(int info)
{
    if(prim == NULL)
    {
        prim = new Nod_dublu(info);
        ultim = prim;
    }
    else
    {
        Nod_dublu* aux = new Nod_dublu(info);
        ultim -> setNext(aux);
        aux -> setAnte(ultim);
        ultim = aux;
    }
}
void Lista::inserare_pozitie(int poz, int data)
{
    int n = nr_noduri();
    if(poz > n + 1)
    {
        cout << "Valoarea introdusa ca pozitie este incorecta.\n";
        return;
    }

    if(poz == 1) ///inserarea unui element la inceputul listei
    {
        if(prim == NULL)
        {
            prim = new Nod_dublu(data);
            ultim = prim;
        }
        else
        {
            Nod_dublu* aux = new Nod_dublu(data, prim);
            prim = aux;
        }
    }
    else if(poz == n + 1)
        inserare_final(data);
    else
    {
        int cnt = 1;
        Nod_dublu* p = prim;
        while(cnt != poz - 1)
        {
            p = (Nod_dublu*) p -> getNext();
            cnt++;
        }

        Nod_dublu* urm = (Nod_dublu*) p -> getNext();
        Nod_dublu* aux = new Nod_dublu(data, urm, p);
        urm -> setAnte(aux);
        p -> setNext(aux);
    }
}
void Lista::stergere_pozitie(int poz)
{
    int n = nr_noduri();
    if(prim == NULL)
    {
        cout << "Nu se poate efectua stergerea.\n";
        return;
    }
    if(poz > n)
    {
        cout << "Valoarea introdusa ca pozitie este incorecta.\n";
        return;
    }

    if(poz == 1) ///stergerea primului element al listei
    {
        if (prim == ultim)
        {
            //  delete prim;
            prim = NULL;
            ultim = NULL;
        }
        else
        {
            Nod_dublu* aux;
            aux = (Nod_dublu*) prim -> getNext();
            prim = aux;
            prim -> setAnte(NULL);
        }
    }
    else if(poz == n) ///stergerea ultimului element al listei
    {
        Nod_dublu* pred;
        pred = (Nod_dublu*)ultim -> getAnte();
        delete ultim;
        ultim = pred;
        ultim -> setNext(NULL);
    }
    else ///stergerea unui element din interiorul listei
    {
        int cnt = 1;
        Nod_dublu* p = prim;
        while(cnt != poz)
        {
            p = (Nod_dublu*) p -> getNext();
            cnt++;
        }

        Nod_dublu* pred;
        pred = (Nod_dublu*) p -> getAnte();
        Nod_dublu* succ;
        succ = (Nod_dublu*) p -> getNext();

        pred -> setNext(succ);
        succ -> setAnte(pred);
        delete p;
    }
}
void Lista::citire(istream& in)
{
    int val;
    in >> val;
    inserare_final(val);
}
void Lista::afisare(ostream& out)
{
    if(prim == NULL)
    {
        out << "Lista vida\n";
        return;
    }

    out << "Lista este:\n";
    Nod_dublu* p = prim;

    while(p != ultim)
    {
        out << p -> getInfo();
        out << " <-> ";
        p = (Nod_dublu*) p -> getNext();
    }

    out << ultim -> getInfo() << " ";

}
istream & operator >> (istream &in, Lista &lc)
{
    lc.citire(in);
    return in;
}
ostream & operator << (ostream &out, Lista &lc)
{
    lc.afisare(out);
    return out;
}
Lista& Lista::operator =(Lista &ld)
{
    int n = nr_noduri();
    Nod_dublu* p = prim;

    if(prim != NULL)
    {
        while(p != ultim)
        {
            stergere_pozitie(1);
            p = (Nod_dublu*) p -> getNext();
            n--;
        }
        stergere_pozitie(1);
    }

    if(ld.prim != NULL)
    {
        p = ld.prim;
        while(p != ld.ultim)
        {
            inserare_final(p -> getInfo());
            p = (Nod_dublu*) p -> getNext();
        }
        inserare_final(p -> getInfo());
    }
}

///-------------------------------------------

class Lista_Circulara:public Lista
{
public:
    Lista_Circulara();
    Lista_Circulara(int, int*);
    Lista_Circulara(const Lista_Circulara&);
    ~Lista_Circulara();

    void inserare_final(int);
    void inserare_pozitie(int, int);
    void stergere_pozitie(int);
    void citire(istream&);
    void afisare(ostream&);
    friend istream & operator >> (istream &, Lista_Circulara &);
    friend ostream & operator << (ostream &, Lista_Circulara &);
    Lista_Circulara& operator =(Lista_Circulara &);
    int josephus(int);
};

Lista_Circulara::Lista_Circulara():Lista() {};
Lista_Circulara::Lista_Circulara(int n, int* v):Lista(n, v)
{
    ultim -> setNext(prim);
    prim -> setAnte(ultim);
}
Lista_Circulara::Lista_Circulara(const Lista_Circulara& lc):Lista(lc)
{
    ultim -> setNext(prim);
    prim -> setAnte(ultim);
}
Lista_Circulara::~Lista_Circulara() {};
void Lista_Circulara::inserare_final(int info)
{
    Lista::inserare_final(info);
    ultim -> setNext(prim);
    prim -> setAnte(ultim);
}
void Lista_Circulara::inserare_pozitie(int poz, int data)
{
    Lista::inserare_pozitie(poz, data);
    if(prim != NULL)
    {
        ultim -> setNext(prim);
        prim -> setAnte(ultim);
    }
}
void Lista_Circulara::stergere_pozitie(int poz)
{
    int n = nr_noduri();
    Lista::stergere_pozitie(poz);
    if(poz == 1 && prim != NULL)
    {
        ultim -> setNext(prim);
        prim -> setAnte(ultim);
    }
    else if(prim != NULL && poz == n)
    {
        ultim -> setNext(prim);
        prim -> setAnte(ultim);
    }
}
void Lista_Circulara::citire(istream& in)
{
    Lista::citire(in);
    ultim -> setNext(prim);
    prim -> setAnte(ultim);
}
void Lista_Circulara::afisare(ostream& out)
{
    Lista::afisare(out);
    if(prim != NULL)
    {
        ultim -> setNext(prim);
        prim -> setAnte(ultim);
        out << "<-> ";
        out << prim -> getInfo() << "\n";
    }
}
Lista_Circulara& Lista_Circulara::operator =(Lista_Circulara &lc)
{
    Lista::operator=(lc);
    ultim -> setNext(prim);
    prim -> setAnte(ultim);
}
istream & operator >> (istream &in, Lista_Circulara &lc)
{
    lc.citire(in);
    return in;
}
ostream & operator << (ostream &out, Lista_Circulara &lc)
{
    lc.afisare(out);
    return out;
};
int Lista_Circulara::josephus(int k)
{
    int nr = nr_noduri();
    int cnt = 0, poz = 0;
    if(nr == 0)
    {
        cout << "Nu se poate efectua operatia.\n";
        return 0;
    }

    Nod_dublu* aux = prim;
    while(nr != 1)
    {
        cnt++;
        if(aux == prim)
            poz = 0;

        poz = poz + 1;
        if(cnt == k)
        {
            cnt = 0;
            stergere_pozitie(poz);
            aux =(Nod_dublu*) aux -> getNext();
            nr--;
            poz--;
        }
        else if(cnt != k && prim != ultim)
            aux = (Nod_dublu*) aux -> getNext();
    }
    cout << prim -> getInfo();
}


void menu_output()
{
    cout << "\n Nita Anca, Grupa 211 - Proiect 2 - Nume proiect: Liste de numere întregi 2 (implementate dinamic) \n";
    cout << "\n\t MENIU:";
    cout << "\n===========================================\n";
    cout << "\n";
    cout << "1. Crearea listei \n";
    cout << "2. Inserarea unui element pe o anumita pozitie a listei \n";
    cout << "3. Stergerea unui element de pe o anumita pozitie din lista \n";
    cout << "4. Problema Josephus \n";
    cout << "5. Afisarea listei \n";
    cout << "0. Iesire. \n";
}


void menu(Lista_Circulara* lc)
{
    int option;  ///optiunea aleasa din meniu
    option = 0;
    int ok = 0;

    do
    {
        menu_output();

        cout << "\nIntroduceti numarul actiunii: ";
        cin >> option;

        if (option == 1)
        {
            if(ok == 1)
                cout << "Lista are deja elemente\n";
            else
            {
                cout << "Introduceti numarul de elemente al listei: ";
                int n;
                cin >> n;

                if(n == 0)
                    cout << "Lista vida\n";
                else
                {
                    ok = 1;
                    cout << "Introduceti cele " << n << " elemente ale listei: ";
                    int i;
                    for(i = 0; i < n; i++)
                        cin >> *lc;
                    cout << *lc;
                }
            }
        }
        if (option == 2)
        {
            cout << *lc;

            cout << "Introduceti noua valoare de inserat in lista: ";
            int data;
            cin >> data;

            cout << "Introduceti pozitia pe care sa se insereze elementul: ";
            int poz;
            cin >> poz;

            lc -> inserare_pozitie(poz, data);
            cout << *lc;

            int n = lc -> nr_noduri();
            if(poz <= n + 1)
                ok = 1;
        }

        if (option == 3)
        {
            cout << *lc;

            cout << "Introduceti pozitia de pe care se va sterge elementul: ";
            int poz;
            cin >> poz;

            lc -> stergere_pozitie(poz);
            cout << *lc;


        }

        if (option == 4)
        {
            cout << "Introduceti o valoare (din cat in cat parcurgem lista): ";
            int k;
            cin >> k;

            cout << "Pozitia ultimei persoane ramase este: ";
            cout << lc -> josephus(k);
            cout << "\n";
        }

        if (option == 5)
        {
            cout << *lc;
        }


        if (option == 0)
        {
            cout << "\nEXIT!\n";
        }

        if (option < 0 || option > 7)
        {
            cout << "\nSelectie invalida\n";
        }

        cout << "\n";
        system("pause"); ///Pauza - Press any key to continue...
        system("cls");   ///Sterge continutul curent al consolei
    }
    while(option != 0);
}


int main()
{
    Lista_Circulara* lc = new Lista_Circulara();
    //Lista* lc = new Lista();
    menu(lc);

    /* Nod_dublu* n = new Nod_dublu(2);
     cout << *n;
     cout << "\n";
     Nod_dublu* n1 = new Nod_dublu();
     cin >> *n1;
     cout << *n1;*/


    /*
           Lista_Circulara* lc = new Lista_Circulara();
           for(int i = 1; i <= 5; i++)
               cin >> *lc;
           cout << *lc;
           lc -> josephus(2);
    */

    /* Nod_dublu* n = new Nod_dublu(3);
     Nod_dublu* n1 = new Nod_dublu(4);
     *n = *n1;
     cout << *n;
     */


    /*  cout << "\n\n";
      Lista_Circulara* lc3(lc);
      lc3 -> afisare();

      delete lc;

      //    lc->inserare_sfarsit(2);*/
    /*Lista_Circulara lc;
    for(int i = 1; i <= 3; i++)
        cin >> lc;
    cout << lc;*/

    // Nod* n1 = new Nod(2);
    //Nod* n2 = new Nod(*n1);
    // Nod n2(*n1);

    //Nod n(2);
    /*Nod n(2);
    Nod* n1;
     n = *n1;*/

    /*  int i;
      Lista_Circulara ld1;
     // for(i = 1; i <= 0; i++)
    //      cin >> ld1;

      Lista_Circulara ld2;
      //for(i = 1; i <= 0; i++)
        //  cin >> ld2;

      cout << ld1;
      cout << "\n\n";
      cout << ld2;
      cout << "\n\n";

      ld1 = ld2;
      cout << "\n\n";
      cout << ld1;*/

    return 0;
}
