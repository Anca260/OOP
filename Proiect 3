

#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
Automobil -> Masina -> Mini
                    -> Mica
                    -> Compacta
          -> Monovolume

*/

class Automobil
{
protected:
    string marca;
    string nume;
    double pret;

public:
    Automobil();
    Automobil(string, string, double);
    Automobil(const Automobil&);
    virtual ~Automobil() {};

    string getMarca() const
    {
        return marca;
    };
    string getNume() const
    {
        return nume;
    };
    double getPret() const
    {
        return pret;
    };
    void setMarca(string marca)
    {
        this -> marca = marca;
    };
    void setNume(string nume)
    {
        this -> nume = nume;
    };
    void setPret(double pret)
    {
        this -> pret = pret;
    };

    virtual void citire(istream&);
    virtual void afisare(ostream&) const;
    friend istream & operator >> (istream &, Automobil&);
    friend ostream & operator << (ostream &, const Automobil&);
    void operator =(const Automobil&);
    bool operator ==(const Automobil&);
};

Automobil::Automobil()
{
    marca = "";
    nume = "";
    pret = 0;
}
Automobil::Automobil(string marca, string nume, double pret)
{
    this -> marca = marca;
    this -> nume = nume;
    this -> pret = pret;
}
Automobil::Automobil(const Automobil& a)
{
    this -> marca = a.marca;
    this -> nume = a.nume;
    this -> pret = a.pret;
}
void Automobil::citire(istream& in)
{
    string s1;
    cout << "Marca automobil: ";
    getline(in, s1);
    marca = s1;

    string s2;
    cout << "Nume automobil: ";
    getline(in, s2);
    nume = s2;

    double n;
    cout << "Pret: ";
    in >> n;
    pret = n;
    in.get();
}
void Automobil::afisare(ostream& out) const
{
    cout << "Marca si nume automobil: " << marca << " " << nume << "\n";
    cout << "Pret automobil: " << pret << " euro" << "\n";
}
istream & operator >> (istream& in, Automobil& a)
{
    a.citire(in);
    return in;
}
ostream & operator << (ostream& out, const Automobil& a)
{
    a.afisare(out);
    return out;
}
void Automobil::operator =(const Automobil& a)
{
    marca = a.marca;
    nume = a.nume;
    pret = a.pret;
}
bool Automobil::operator ==(const Automobil& a)
{
    if(marca != a.marca)
        return 0;
    if(nume != a.nume)
        return 0;
    if(pret != a.pret)
        return 0;
    return 1;
}


///-------------------------------------------------------


class Masina: public Automobil
{
protected:
    double lungime;
    string tip; //de oras sau de drum lung

public:
    Masina();
    Masina(string, string, double, double, string);
    Masina(const Masina&);
    virtual ~Masina() {};

    double getLungime() const
    {
        return lungime;
    };
    string getTip() const
    {
        return tip;
    };
    void setLungime(double lungime)
    {
        this -> lungime = lungime;
    };
    void setTip(string tip)
    {
        this -> tip = tip;
    };

    virtual void citire(istream&);
    virtual void afisare(ostream&) const;
    void operator =(const Masina&);
    bool operator ==(const Masina&);
};

Masina::Masina(): Automobil()
{
    lungime = 0;
    tip = "";
}
Masina::Masina(string s1, string s2, double n, double lungime, string tip): Automobil(s1, s2, n)
{
    this -> lungime = lungime;
    this -> tip = tip;
}
Masina::Masina(const Masina& c): Automobil(c)
{
    lungime = c.lungime;
    tip = c.tip;
}
void Masina::citire(istream& in)
{
    Automobil::citire(in);

    double len;
    cout << "Lungime automobil: ";
    in >> len;
    lungime = len;

    in.get();
    string s;
    cout << "Tip masina('oras' sau 'drum_lung'): ";
    getline(in, s);
    tip = s;
}
void Masina::afisare(ostream& out) const
{
    Automobil::afisare(out);
    cout << "Lungime automobil: " << lungime << "\n";
    cout << "Tip masina: " << tip << "\n";
}
void Masina::operator =(const Masina& c)
{
    Automobil::operator=(c);
    lungime = c.lungime;
    tip = c.tip;
}
bool Masina::operator ==(const Masina& c)
{
    if(Automobil::operator==(c) == 0)
        return 0;
    if(lungime != c.lungime)
        return 0;
    if(tip != c.tip)
        return 0;
    return 1;
}


///------------------------------------------------------------


class Mini: public Masina
{
public:
    Mini();
    Mini(string, string, double, double, string);
    Mini(const Mini&);
    ~Mini() {};

    void citire(istream&);
    void afisare(ostream&) const;
    void operator =(const Mini& m)
    {
        Masina::operator=(m);
    };
};

Mini::Mini(): Masina() {}
Mini::Mini(string s1, string s2, double n1, double n2, string s3): Masina(s1, s2, n1, n2, s3)
{
    try
    {
        if(n2 < 0 || n2 > 4)
            throw 1;
        else if(s3.compare("oras"))
            throw 2;
    }
    catch(int i)
    {
        cout << "Categoria MINI contine doar masini sub 4 metri lungime, de oras.\n";
        exit(EXIT_FAILURE);
    }
}
Mini::Mini(const Mini& m): Masina(m) {}
void Mini::citire(istream& in)
{
    cout << "Categoria MINI contine masini de oras (tipul masinii), sub 4m lungime.\n";
    Masina::citire(in);

    try
    {
        if(lungime < 0 || lungime > 4)
            throw 1;
        else if(tip != "oras")
            throw 2;
    }
    catch(int i)
    {
        cout << "Categoria MINI contine doar masini sub 4 metri lungime.\n";
        exit(EXIT_FAILURE);
    }
}
void Mini::afisare(ostream& out) const
{
    cout << "Categorie masina: MINI \n";
    Masina::afisare(out);
}


///------------------------------------------------------------


class Mica: public Masina
{
public:
    Mica();
    Mica(string, string, double, double, string);
    Mica(const Mica&);
    ~Mica() {};

    void citire(istream&);
    void afisare(ostream&) const;
    void operator =(const Mica& m)
    {
        Mica::operator=(m);
    };
};

Mica::Mica(): Masina() {}
Mica::Mica(string s1, string s2, double n1, double n2, string s3): Masina(s1, s2, n1, n2, s3)
{
    try
    {
        if(n2 < 3.85 || n2 > 4.1)
            throw 1;
        else if(s3 != "oras")
            throw 2;
    }
    catch(int i)
    {
        cout << "Categoria MICA contine doar masini cu lungime intre 3.85 si 4.1 metri, de oras.\n";
        exit(EXIT_FAILURE);
    }
}
Mica::Mica(const Mica& m): Masina(m) {}
void Mica::citire(istream& in)
{
    cout << "Categoria MICA contine masini de oras (tipul masinii), cu lungime intre 3.85 si 4.1 metri.\n";
    Masina::citire(in);

    try
    {
        if(lungime < 3.85 || lungime > 4.1)
            throw 1;
        else if(tip != "oras")
            throw 2;
    }
    catch(int i)
    {
        cout << "Categoria MICA contine doar masini cu lungime intre 3.85 si 4.1 metri, de oras.\n";
        exit(EXIT_FAILURE);
    }
}
void Mica::afisare(ostream& out) const
{
    cout << "Categorie masina: MICA \n";
    Masina::afisare(out);
}


///-------------------------------------------------------------


class Compacta: public Masina
{
private:
    string model;

public:
    Compacta();
    Compacta(string, string, string, double, double, string);
    Compacta(const Compacta&);
    ~Compacta() {};

    string getModel() const
    {
        return model;
    };

    void citire(istream&);
    void afisare(ostream&) const;
    void operator =(const Compacta&);
    bool operator ==(const Compacta&);
};

Compacta::Compacta(): Masina()
{
    model = "";
}
Compacta::Compacta(string s, string s1, string s2, double n1, double n2, string s3): Masina(s1, s2, n1, n2, s3)
{
    model = s;
    try
    {
        if(n2 < 4.2 || n2 > 4.5)
            throw 1;
        else if(s3 != "oras" && s3 != "drum_lung")
            throw 2;
        else if(model != "hatchback" && model != "sedan" && model != "combi")
            throw 3;
    }
    catch(int i)
    {
        cout << "Categoria COMPACTA contine doar masini cu lungime intre 4.2 si 4.5 metri, de oras/drum lung, hatchback, combi sau sedan.\n";
        exit(EXIT_FAILURE);
    }
}
Compacta::Compacta(const Compacta& m): Masina(m)
{
    model = m.model;
}
void Compacta::citire(istream& in)
{
    cout << "Categoria COMPACTA contine masini de oras/drum lung (tipul masinii), cu lungime intre 4.2 si 4.5 metri, model hatchback, combi sau sedan.\n";
    Masina::citire(in);

    cout << "Model (hatchback/combi/sedan): ";
    string s;
    getline(in, s);
    model = s;

    try
    {
        if(lungime > 4.5 || lungime < 4.2)
            throw 1;
        else if(tip != "oras" && tip != "drum_lung")
            throw 2;
        else if(model != "hatchback" && model != "combi" && model != "sedan")
            throw 3;
    }
    catch(int i)
    {
        cout << "Categoria COMPACTA contine doar masini cu lungime intre 4.2 si 4.5 metri, de oras/drum lung, model hatchback, combi sau sedan.\n";
        exit(EXIT_FAILURE);
    }
}
void Compacta::afisare(ostream& out) const
{
    cout << "Categorie masina: COMPACTA \n";
    Masina::afisare(out);
    cout << "Model: " << model << "\n\n";
}
void Compacta::operator =(const Compacta& m)
{
    Compacta::operator=(m);
    model = m.model;
};
bool Compacta::operator ==(const Compacta& m)
{
    if(model != m.model)
        return 0;
    if(Masina::operator==(m))
        return 1;
    return 0;
};


///-------------------------------------------------------------


class Monovolume: public Automobil
{
private:
    int nr_pers;
    bool stadiu; //nou sau second-hand
    int ani_vechime;
    double discount;
    string luna;
    double pondere;

public:
    Monovolume();
    Monovolume(int, string, string, double);
    Monovolume(int, int, string, double, string, string, double);
    Monovolume(const Monovolume&);
    ~Monovolume() {};

    int getNrPers() const
    {
        return nr_pers;
    };
    bool getStadiu() const
    {
        return stadiu;
    };
    int getAniVechime() const
    {
      return ani_vechime;
    };
    double getDiscount() const
    {
        return discount;
    };
    string getLuna() const
    {
        return luna;
    };
    double getPondere() const
    {
        return pondere;
    };

    void citire(istream&);
    void afisare(ostream&) const;
    void operator =(const Monovolume&);

};

Monovolume::Monovolume(): Automobil()
{
    nr_pers = 0;
    ani_vechime = 0;
    discount = 0;
    luna = "";
    pondere = 0;
}
Monovolume::Monovolume(int nr_pers, string s1, string s2, double n): Automobil(s1, s2, n) ///monovolum nou
{
    this -> nr_pers = nr_pers;
    try
    {
        if(nr_pers > 7 || nr_pers < 5)
            throw 1;
    }
    catch(int i)
    {
        cout << "Monovolumul poate transporta intre 5 si 7 persoane. \n";
        exit(EXIT_FAILURE);
    }

    ani_vechime = 0;
    stadiu = 1;
    luna = "";
    pondere = 0;
    discount = 0;
}
Monovolume::Monovolume(int nr_pers, int ani_vechime, string luna, double pondere, string s1, string s2, double n): Automobil(s1, s2, n)
{
    this -> nr_pers = nr_pers;
    try
    {
        if(nr_pers > 7 || nr_pers < 5)
            throw 1;
    }
    catch(int i)
    {
        cout << "Monovolumul poate transporta intre 5 si 7 persoane. \n";
        exit(EXIT_FAILURE);
    }

    this -> ani_vechime = ani_vechime;

    if(ani_vechime != 0)
        stadiu = 0; //second-hand
    else
        stadiu = 1; //nou


    this -> luna = luna;
    try
    {
        if(luna != "ianuarie" && luna != "februarie" && luna != "martie" && luna != "aprilie"
                && luna != "mai" && luna != "iunie" && luna != "iulie" && luna != "august"
                && luna != "septembrie" && luna != "octombrie" && luna != "noimebrie" && luna != "decemrbrie")
            throw 1;
    }
    catch(int i)
    {
        cout << "Luna invalida. \n";
        exit(EXIT_FAILURE);
    }


    this -> pondere = pondere;

    if(luna == "iunie" || luna == "iulie" || luna == "august")
        discount = 0.1 * pret;
    else
        discount = ani_vechime * pondere;
}
Monovolume::Monovolume(const Monovolume& m): Automobil(m)
{
    nr_pers = m.nr_pers;
    stadiu = m.stadiu;
    ani_vechime = m.ani_vechime;
    discount = m.discount;
    luna = m.luna;
    pondere = m.pondere;
}
void Monovolume::citire(istream& in)
{
    Automobil::citire(in);

    cout << "Numar persoane: ";
    int n;
    in >> n;
    nr_pers = n;
    in.get();
    try
    {
        if(nr_pers > 7 || nr_pers < 5)
            throw 1;
    }
    catch(int i)
    {
        cout << "Monovolumul poate transporta intre 5 si 7 persoane. \n";
        exit(EXIT_FAILURE);
    }


    cout << "Numar ani vechime: ";
    int n1;
    in >> n1;
    ani_vechime = n1;
    in.get();


    if(ani_vechime != 0)
    {
        stadiu = 0;

        cout << "Luna: ";
        string s;
        getline(in, s);
        luna = s;
        try
        {
            if(luna != "ianuarie" && luna != "februarie" && luna != "martie" && luna != "aprilie"
                    && luna != "mai" && luna != "iunie" && luna != "iulie" && luna != "august"
                    && luna != "septembrie" && luna != "octombrie" && luna != "noimebrie" && luna != "decemrbrie")
                throw 1;
        }
        catch(int i)
        {
            cout << "Luna invalida. \n";
            exit(EXIT_FAILURE);
        }


        if(luna == "iunie" || luna == "iulie" || luna == "august")
            discount = 0.1 * pret;
        else
        {
            cout << "Pondere: ";
            double p;
            in >> p;
            pondere = p;
            discount = pondere * ani_vechime;
        }
        pret = pret - discount;
    }
    else
        stadiu = 1;
}
void Monovolume::afisare(ostream& out) const
{
    Automobil::afisare(out);

    cout << "Numar persoane: " << nr_pers << "\n";
    cout << "Numar ani vechime: " << ani_vechime << "\n";

    if(stadiu == 0)
    {
        cout << "Monovolum second-hand\n";
        cout << "Luna: " << luna << "\n";

        if(luna != "iunie" && luna != "iulie" && luna != "august")
            cout << "Pondere: " << pondere << "\n";

        cout << "Discount: " << discount << " euro\n";
    }
    else
        cout << "Monovolum nou\n";
}
void Monovolume::operator =(const Monovolume& m)
{
    Automobil::operator=(m);
    nr_pers = m.nr_pers;
    stadiu = m.stadiu;
    ani_vechime = m.ani_vechime;
    discount = m.discount;
    luna = m.luna;
    pondere = m.pondere;
}


///--------------------------------------------------------------


template <class T> class Vanzare
{
private:
    static int stoc;
    static int vandute;
    vector <T> vec_stoc; //lista automobile in stoc
    vector <T> vec_vandute; //lista automobile vandute

public:
    Vanzare() {};
    Vanzare(T ob)
    {
        vec_stoc.push_back(ob);
        stoc++;
    };
    Vanzare(T* ob, int n)
    {
        for(int i = 0; i < n; i++)
        {
            vec_stoc.push_back(ob[i]);
            stoc++;
        }
    }
    Vanzare(const Vanzare& a)
    {
        vec_stoc = a.vec_stoc;
        vec_vandute = a.vec_vandute;
        stoc = a.vec_stoc.size();
        vandute = a.vec_vandute.size();
    }
    ~Vanzare()
    {
        vec_stoc.clear();
        vec_vandute.clear();
    };

    void operator =(const Vanzare& a)
    {
        vec_stoc = a.vec_stoc;
        vec_vandute = a.vec_vandute;
        stoc = a.vec_stoc.size();
        vandute = a.vec_vandute.size();
    }
    void inserare_stoc(T ob)
    {
        vec_stoc.push_back(ob);
        stoc++;
    }
    T cautare_stoc(int n)
    {
        int i = 0;
        for(auto it:vec_stoc)
        {
            i++;
            if(i == n)
                return it;
        }
    }
    void citire(istream& in)
    {
        cout << "Introduceti numarul de masini in stoc: ";
        int nr;
        in >> nr;
        stoc = nr;
        in.get();

        cout << "Introduceti automobilele din stoc:\n";
        for(int i = 0; i < nr; i++)
        {
            T elem;
            in >> elem;
            vec_stoc.push_back(elem);
            cout << "\n";
        }
    }
    friend istream& operator >>(istream& in, Vanzare<T> &ob)
    {
        ob.citire(in);
        return in;
    }
    void afisare(ostream& out) const
    {
        if(stoc != 0)
        {
            int i = 0;
            out << "In stoc:\n";
            for(auto it: vec_stoc)
            {
                i++;
                out << i << ") ";
                out << it.getMarca() << " " << it.getNume() << " , " << it.getPret() << " euro, ";
                out << it.getLungime() << " metri, " << "de " << it.getTip() << "\n";
            }
        }
        else
            out << "Nu sunt automobile de acest tip in stoc.";

        if(vandute != 0)
        {
            int i = 0;
            out << "Vandute:\n";
            for(auto it: vec_vandute)
            {
                i++;
                out << i << ") ";
                out << it.getMarca() << " " << it.getNume() << " , " << it.getPret() << " euro, ";
                out << it.getLungime() << " metri, " << "de " << it.getTip() << "\n";
            }
        }
        else
            out << "Nu s-au vandut automobile de acest tip momentan.";
    }
    friend ostream& operator <<(ostream& out, const Vanzare<T> &ob)
    {
        ob.afisare(out);
        return out;
    }
    void sell(T ob)
    {
        vector <T> vec_aux;
        int ok = 0;
        for(auto it:vec_stoc)
        {
            if(it == ob && ok == 0)
            {
                vec_vandute.push_back(it);
                vandute++;
                stoc--;
                ok = 1;
            }
            else
                vec_aux.push_back(it);
        }
        vec_stoc = vec_aux;
    }
    void operator -=(const T& ob)
    {
        sell(ob);
    }
    static void masiniStoc()
    {
        cout << stoc;
    }
    static void masiniVandute()
    {
        cout << vandute;
    }
};

template <class T> int Vanzare<T>::stoc = 0;
template <class T> int Vanzare<T>::vandute = 0;


///---------------------------------------------------------------


template <> class Vanzare <Monovolume>
{
private:
    vector <Monovolume> vec_stoc;
    vector <Monovolume> vec_vandute;
    static int nr_stoc;
    static int nr_vandute;

public:
    Vanzare() {};
    Vanzare(Monovolume ob)
    {
        vec_stoc.push_back(ob);
        nr_stoc++;
    }
    Vanzare(Monovolume* v, int n)
    {
        for(int i = 0; i < n; i++)
        {
            vec_stoc.push_back(v[i]);
            nr_stoc++;
        }
    }
    ~Vanzare()
    {
        vec_stoc.clear();
        vec_vandute.clear();
    }

    void inserare_stoc(Monovolume ob)
    {
        vec_stoc.push_back(ob);
        nr_stoc++;
    }
    void sell(Monovolume ob)
    {
        vector <Monovolume> vec_aux;
        int ok = 0;
        for(auto it:vec_stoc)
        {
            if(it == ob && ok == 0)
            {
                vec_vandute.push_back(it);
                nr_vandute++;
                nr_stoc--;
                ok = 1;
            }
            else
                vec_aux.push_back(it);
        }
        vec_stoc = vec_aux;
    }
    Monovolume cautare_stoc(int n)
    {
        int i = 0;
        for(auto it:vec_stoc)
        {
            i++;
            if(i == n)
                return it;
        }
    }
    void operator -=(const Monovolume& m)
    {
        sell(m);
    }

    void citire(istream& in)
    {
        cout << "Introduceti numarul de monovolume in stoc: ";
        int nr;
        in >> nr;
        nr_stoc = nr;
        in.get();

        cout << "Introduceti monovolumele din stoc:\n";
        for(int i = 0; i < nr; i++)
        {
            Monovolume elem;
            in >> elem;
            vec_stoc.push_back(elem);
            cout << "\n";
        }
    }
    friend istream& operator >>(istream& in, Vanzare<Monovolume> &ob)
    {
        ob.citire(in);
        return in;
    }
    void afisare(ostream& out) const
    {
        if(nr_stoc != 0)
        {
            int i = 0;
            out << "Monovolume in stoc:\n";
            for(auto it: vec_stoc)
            {
                i++;
                out << i << ") ";
                out << it.getMarca() << " " << it.getNume();
                if(it.getStadiu() == 0)
                    out << ", second-hand\n";
                else
                    out << ", nou\n";
            }
        }
        else
            out << "Nu sunt monovolume in stoc.";

        if(nr_vandute != 0)
        {
            int i = 0;
            out << "Monovolume vandute:\n";
            for(auto it: vec_vandute)
            {
                i++;
                out << i << ") ";
                out << it.getMarca() << " " << it.getNume();
                if(it.getStadiu() == 0)
                    out << ", second-hand\n";
                else
                    out << ", nou\n";
            }
        }
        else
            out << "Nu s-au vandut monovolume momentan.";
    }
    friend ostream& operator <<(ostream& out, const Vanzare<Monovolume> &ob)
    {
        ob.afisare(out);
        return out;
    }


};

template <> int Vanzare<Monovolume>::nr_stoc = 0;
template <> int Vanzare<Monovolume>::nr_vandute = 0;


///---------------------------------------------------------------

///citirea si memorarea unui obiect
void tip(Automobil* &a, int i)
{
    string nume;
    cout << "Introduceti tipul automobilului (mini/mica/compacta/monovolum) no. " << i + 1 << ": ";
    cin >> nume;

    try
    {
        if(nume == "mini")
        {
            cin.get();
            a = new Mini();
            cin >> *a;
        }
        else if(nume == "mica")
        {
            cin.get();
            a = new Mica();
            cin >> *a;
        }
        else if(nume == "compacta")
        {
            cin.get();
            a = new Compacta();
            cin >> *a;
        }
        else if(nume == "monovolum")
        {
            cin.get();
            a = new Monovolume();
            cin >> *a;
        }
        else
            throw 10;
    }
    catch (bad_alloc var)
    {
        cout << "Allocation Failure\n";
        exit(EXIT_FAILURE);
    }
    catch(int j)
    {
        cout<<"Nu ati introdus un tip de automobil valid. Incercati mini, mica, compacta sau monovolum.\n ";
        exit(EXIT_FAILURE);
    }
}


///---------------------------------------------------------------

///citirea, memorarea si afisarea a n obiecte
void memorare(Automobil** &v, int n)
{
    v = new Automobil*[n];
    for(int i = 0; i < n; i++)
    {
        tip(v[i], i);
        cout << "\n";
    }

    cout << "----------------------------------------------\n";
    cout << "Automobile disponibile:\n";
    cout << "----------------------------------------------\n";
    for(int i = 0; i < n; i++)
        cout << *v[i] << "\n";

}

///---------------------------------------------------------------
/// clasificarea automobilelor
template<class T> Vanzare<T> selectare(vector<Automobil*> v)
{
    Vanzare<T> vec;
    for(auto it:v)
    {
        T* aux = dynamic_cast<T*>(it);
        if(aux)
            vec.inserare_stoc(*aux);
    }
    return vec;
}


///---------------------------------------------------------------
/// actualizarea vectorului dupa stergerea unui element
template<class T> vector<Automobil*> actualizare(vector<Automobil*> v, T ob)
{
    vector <Automobil*> v_nou;
    int cnt = 0;
    for(auto it:v)
    {
        T* aux = dynamic_cast<T*>(it);
        if(aux)
        {
            if(aux -> getMarca() != ob.getMarca() || aux -> getNume() != ob.getNume() || aux -> getPret() != ob.getPret()
                    || aux -> getLungime() != ob.getLungime() || aux -> getTip() != ob.getTip())
                v_nou.push_back(it);
            else
            {
                if(cnt == 0)
                    cnt == 1;
                else
                    v_nou.push_back(it);
            }
        }
        else
            v_nou.push_back(it);
    }
    return v_nou;
}

template<> vector<Automobil*> actualizare(vector<Automobil*> v, Compacta ob)
{
    vector <Automobil*> v_nou;
    int cnt = 0;
    for(auto it:v)
    {
        Compacta* aux = dynamic_cast<Compacta*>(it);
        if(aux)
        {
            if(aux -> getMarca() != ob.getMarca() || aux -> getNume() != ob.getNume() || aux -> getPret() != ob.getPret()
                    || aux -> getLungime() != ob.getLungime() || aux -> getTip() != ob.getTip()
                    || aux -> getModel() != ob.getModel())
                v_nou.push_back(it);
            else
            {
                if(cnt == 0)
                    cnt == 1;
                else
                    v_nou.push_back(it);
            }
        }
        else
            v_nou.push_back(it);
    }
    return v_nou;
}

template<> vector<Automobil*> actualizare(vector<Automobil*> v, Monovolume ob)
{
    vector <Automobil*> v_nou;
    int cnt = 0;
    for(auto it:v)
    {
        Monovolume* aux = dynamic_cast<Monovolume*>(it);
        if(aux)
        {
            if(aux -> getMarca() != ob.getMarca() || aux -> getNume() != ob.getNume() || aux -> getPret() != ob.getPret()
               || aux -> getNrPers() != ob.getNrPers() || aux -> getAniVechime() != ob.getAniVechime() ||
               aux -> getStadiu() != ob.getStadiu() || aux -> getDiscount() != ob.getDiscount()
               || aux -> getLuna() != ob.getLuna() || aux -> getPondere() != ob.getPondere())
                v_nou.push_back(it);
            else
            {
                if(cnt == 0)
                    cnt == 1;
                else
                    v_nou.push_back(it);
            }
        }
        else
            v_nou.push_back(it);
    }
    return v_nou;
}

///---------------------------------------------------------------
/// functie pentru cumparare
template<class T> vector<Automobil*> cumparare(vector<Automobil*> v)
{
    /// selectare automobile de tip 'T'
    Vanzare<T> vec;
    vec = selectare<T>(v);
    cout << vec;
    cout << "\n----------------------------------------------\n";

    /// cumparare 'T'
    cout << "Introduceti indexul automobilului pe care il cumparati: ";
    int ind;
    cin >> ind;
    T ob  = vec.cautare_stoc(ind);
    vec -=(ob);
    cout << "----------------------------------------------\n";
    cout << vec;

    /// actualizare v dupa stergerea unei masini de tip 'T'
    vector <Automobil*> v_nou;
    v_nou = actualizare<T>(v, ob);
    return v_nou;
}


///---------------------------------------------------------------

void menu_output()
{
    cout << "\nPARC AUTO\n";
    cout << "\n\t\tMENIU:";
    cout << "\n===========================================\n";
    cout << "\n";
    cout << "1. Citire informatii despre automobilele disponibile in parcul auto\n";
    cout << "2. Afisare informatii despre automobilele disponibile in parcul auto\n";
    cout << "3. Afisare informatii despre automobilele din categoria MINI disponibile in parcul auto\n";
    cout << "4. Afisare informatii despre automobilele din categoria MICA disponibile in parcul auto\n";
    cout << "5. Afisare informatii despre automobilele din categoria COMPACTA disponibile in parcul auto\n";
    cout << "6. Afisare informatii despre automobilele din categoria MONOVOLUME disponibile in parcul auto\n";
    cout << "7. Inserare automobil in parcul auto\n";
    cout << "8. Cumparare automobil, categoria MINI\n";
    cout << "9. Cumparare automobil, categoria MICA\n";
    cout << "10. Cumparare automobil, categoria COMPACTA\n";
    cout << "11. Cumparare automobil, categoria MONOVOLUME\n";
    cout << "0. Iesire.";
    cout << "\n";
}

///---------------------------------------------------------------


void menu()
{
    int option;///optiunea aleasa din meniu
    option=0;

    int n = 0;
    int ok = 0;
    vector <Automobil*> v;

    do
    {
        menu_output();
        cout << "\nIntroduceti numarul actiunii: ";
        cin >> option;

        if(option == 1)
        {
            if(ok)
                cout << "In parcul auto sunt disponibile automobile. Incercati optiunea 7.";
            else
            {
                cout << "Introduceti numarul de automobile din parcul auto: ";
                cin >> n;

                cout << "\n";
                if(n > 0)
                {
                    ok = 1;
                    for(int i = 0; i < n; i++)
                    {
                        Automobil* a;
                        tip(a, i);
                        v.push_back(a);
                        cout << "\n";
                    }

                    cout << "----------------------------------------------\n";
                    cout << "Automobile disponibile in parcul auto:\n";
                    cout << "----------------------------------------------\n";
                    for(auto it:v)
                        cout << *it << "\n";
                }
                else
                    cout << "Numarul introdus trebuie sa fie pozitiv.\n";
            }
        }

        if(option == 2)
        {
            if(n == 0)
                cout << "Momentan nu sunt disponibile automobile in parcul auto.\n";
            else
            {
                cout << "In parcul auto sunt disponibile urmatoarele automobile:\n\n";
                for(auto it:v)
                    cout << *it << "\n";
            }
        }

        if(option == 3)
        {
            int nr_mini = 0;
            if(n > 0)
                for(auto it:v)
                {
                    Mini* aux = dynamic_cast<Mini*>(it);
                    if(aux)
                    {
                        nr_mini++;
                        cout << *aux << "\n";
                    }
                }
            else
                cout << "Nu sunt disponibile automobile in parcul auto. Reveniti la optiunea 1.\n";
        }

        if(option == 4)
        {
            int nr_mica = 0;
            if(n > 0)
                for(auto it:v)
                {
                    Mica* aux = dynamic_cast<Mica*>(it);
                    if(aux)
                    {
                        nr_mica++;
                        cout << *aux << "\n";
                    }
                }
            else
                cout << "Nu sunt disponibile automobile in parcul auto. Reveniti la optiunea 1.\n";
        }

        if(option == 5)
        {
            int nr_compacta = 0;
            if(n > 0)
                for(auto it:v)
                {
                    Compacta* aux = dynamic_cast<Compacta*>(it);
                    if(aux)
                    {
                        nr_compacta++;
                        cout << *aux << "\n";
                    }
                }
            else
                cout << "Nu sunt disponibile automobile in parcul auto. Reveniti la optiunea 1.\n";
        }

        if(option == 6)
        {
            int nr_monovolume = 0;
            if(n > 0)
                for(auto it:v)
                {
                    Monovolume* aux = dynamic_cast<Monovolume*>(it);
                    if(aux)
                    {
                        nr_monovolume++;
                        cout << *aux << "\n";
                    }
                }
            else
                cout << "Nu sunt disponibile automobile in parcul auto. Reveniti la optiunea 1.\n";
        }
        if(option == 7)
        {
            Automobil* a;
            tip(a, n);
            n++;
            v.push_back(a);

            cout << "\n----------------------------------------------\n";
            cout << "Automobile disponibile in parcul auto:\n";
            cout << "----------------------------------------------\n";
            for(auto it:v)
                cout << *it << "\n";
        }
        if(option == 8)
        {
            vector <Automobil*> v_nou;
            v_nou = cumparare<Mini>(v);
            v = v_nou;
            v_nou.clear();

        }
        if(option == 9)
        {
            vector <Automobil*> v_nou;
            v_nou = cumparare<Mica>(v);
            v = v_nou;
            v_nou.clear();
        }
        if(option == 10)
        {
            vector <Automobil*> v_nou;
            v_nou = cumparare<Compacta>(v);
            v = v_nou;
            v_nou.clear();
        }
        if(option == 11)
        {
            vector <Automobil*> v_nou;
            v_nou = cumparare<Monovolume>(v);
            v = v_nou;
            v_nou.clear();
        }

        if (option == 0)
        {
            v.clear();
            cout<<"\nEXIT\n\n";
        }
        if (option < 0 || option > 11)
        {
            cout << "\nSelectie invalida\n";
        }
        cout << "\n";
        system("pause"); ///Pauza - Press any key to continue...
        system("cls");   ///Sterge continutul curent al consolei
    }
    while(option != 0);
}


int main()
{
    menu();
    //Vanzare<Compacta> v;
    //cin >> v;


    /**

    -> structura set pair
    -> operator == monovolume
    -> compacta model (rezolvare bug)
    -> editare caz part optiuni 3-6

    */
    return 0;
}

